
rtos-Task-EX-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000ff0  00001084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002c9  008000a0  008000a0  000010c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000364c  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e88  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d61  00000000  00000000  000058ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  00007610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001081  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d42  00000000  00000000  00008e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000bb47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  8a:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_enable>:
#include "lcd_drive.h"


// to activate the enable to send commands or data
void send_enable(void) {
	PORTC |= (1 << en);
  92:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	00 c0       	rjmp	.+0      	; 0x96 <send_enable+0x4>
	_delay_us(2);
	PORTC &= ~(1 << en);
  96:	a8 98       	cbi	0x15, 0	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <send_enable+0x8>
  9a:	08 95       	ret

0000009c <send_command>:
	_delay_us(2);
}
// to send commands
void send_command(  char command){
	PORTC &= ~(1 << rs);
  9c:	a9 98       	cbi	0x15, 1	; 21
	LCD_DATA = 0 ;
  9e:	18 ba       	out	0x18, r1	; 24
	LCD_DATA = command ;
  a0:	88 bb       	out	0x18, r24	; 24
	send_enable();
  a2:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  a6:	08 95       	ret

000000a8 <send_data>:
}
//to send the data
void send_data (char Data){
	PORTC |= (1 << rs);
  a8:	a9 9a       	sbi	0x15, 1	; 21
	LCD_DATA = 0 ;
  aa:	18 ba       	out	0x18, r1	; 24
	LCD_DATA = Data ;
  ac:	88 bb       	out	0x18, r24	; 24
	send_enable();
  ae:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  b2:	08 95       	ret

000000b4 <Lcd_Init>:
}
// The intializing function to set the display to operate
void Lcd_Init(){
	DDRC |=(1<<rs);
  b4:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |=(1<<en);
  b6:	a0 9a       	sbi	0x14, 0	; 20
	DDRB = 0XFF ;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
	PORTC &= ~(1 << rs);
  bc:	a9 98       	cbi	0x15, 1	; 21
	PORTC &= ~(1 << en);
  be:	a8 98       	cbi	0x15, 0	; 21
	LCD_DATA = 0x00;
  c0:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	87 e8       	ldi	r24, 0x87	; 135
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <Lcd_Init+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <Lcd_Init+0x18>
  cc:	00 00       	nop
	/////////////////////////////
	_delay_ms(20);
	LCD_DATA = 0x00;
  ce:	18 ba       	out	0x18, r1	; 24
	send_command(0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
	send_enable();
  d6:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  da:	85 ed       	ldi	r24, 0xD5	; 213
  dc:	96 e0       	ldi	r25, 0x06	; 6
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <Lcd_Init+0x2a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <Lcd_Init+0x30>
  e4:	00 00       	nop

	_delay_ms(7);
	LCD_DATA = 0x00;
  e6:	18 ba       	out	0x18, r1	; 24
	send_command(0x38);
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
	send_enable();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  f2:	8f e2       	ldi	r24, 0x2F	; 47
  f4:	95 e7       	ldi	r25, 0x75	; 117
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Lcd_Init+0x42>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Lcd_Init+0x48>
  fc:	00 00       	nop
	
	_delay_ms(120);
	LCD_DATA = 0x00;
  fe:	18 ba       	out	0x18, r1	; 24
	send_command(0x38);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
	send_enable();
 106:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
	///////////////////////////////////
	send_command(_LCD_CLEAR);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 110:	83 ec       	ldi	r24, 0xC3	; 195
 112:	99 e0       	ldi	r25, 0x09	; 9
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <Lcd_Init+0x60>
 118:	00 c0       	rjmp	.+0      	; 0x11a <Lcd_Init+0x66>
 11a:	00 00       	nop
	_delay_ms(10);
	send_command(_LCD_RETURN_HOME);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <Lcd_Init+0x72>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <Lcd_Init+0x78>
 12c:	00 00       	nop
	_delay_ms(10);
	send_command(_CHARACTER_ENTERY_MODE);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 134:	83 ec       	ldi	r24, 0xC3	; 195
 136:	99 e0       	ldi	r25, 0x09	; 9
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Lcd_Init+0x84>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Lcd_Init+0x8a>
 13e:	00 00       	nop
	_delay_ms(10);
	send_command(_LCD_TURN_ON);
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <Lcd_Init+0x96>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <Lcd_Init+0x9c>
 150:	00 00       	nop
	_delay_ms(10);
	send_command(_LCD_MOVE_CURSOR_LEFT);
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 158:	83 ec       	ldi	r24, 0xC3	; 195
 15a:	99 e0       	ldi	r25, 0x09	; 9
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <Lcd_Init+0xa8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Lcd_Init+0xae>
 162:	00 00       	nop
	_delay_ms(10);
	send_command(0x56);
 164:	86 e5       	ldi	r24, 0x56	; 86
 166:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 16a:	83 ec       	ldi	r24, 0xC3	; 195
 16c:	99 e0       	ldi	r25, 0x09	; 9
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Lcd_Init+0xba>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Lcd_Init+0xc0>
 174:	00 00       	nop
	_delay_ms(10);
	send_command(_LCD_FIRST_address);
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 17c:	83 ec       	ldi	r24, 0xC3	; 195
 17e:	99 e0       	ldi	r25, 0x09	; 9
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Lcd_Init+0xcc>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Lcd_Init+0xd2>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <Lcd_Chr>:
	_delay_ms(10);
}
// to show a characater on the display
void Lcd_Chr(char row, char column, char out_char){
 18a:	cf 93       	push	r28
 18c:	c4 2f       	mov	r28, r20
	row-- ;
	column--;
	send_command((0x80 + 0x40 * row)+ column );
 18e:	90 e4       	ldi	r25, 0x40	; 64
 190:	89 9f       	mul	r24, r25
 192:	60 0d       	add	r22, r0
 194:	11 24       	eor	r1, r1
 196:	86 2f       	mov	r24, r22
 198:	81 5c       	subi	r24, 0xC1	; 193
 19a:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Lcd_Chr+0x18>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Lcd_Chr+0x1e>
 1a8:	00 00       	nop
	_delay_ms(1);
	send_data(out_char);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 54 00 	call	0xa8	; 0xa8 <send_data>
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <Lcd_Chr+0x2a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <Lcd_Chr+0x30>
 1ba:	00 00       	nop
	_delay_ms(1);
}
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <Lcd_Out>:

// to show strings
void Lcd_Out(char row, char column, char *text){
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ea 01       	movw	r28, r20
	row-- ;
	column--;
	send_command((0x80 + 0x40 * row)+ column );
 1c6:	90 e4       	ldi	r25, 0x40	; 64
 1c8:	89 9f       	mul	r24, r25
 1ca:	60 0d       	add	r22, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	86 2f       	mov	r24, r22
 1d0:	81 5c       	subi	r24, 0xC1	; 193
 1d2:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 1d6:	89 ef       	ldi	r24, 0xF9	; 249
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <Lcd_Out+0x1a>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Lcd_Out+0x20>
 1e0:	00 00       	nop
	_delay_ms(1);
	while(*text){
 1e2:	88 81       	ld	r24, Y
 1e4:	88 23       	and	r24, r24
 1e6:	61 f0       	breq	.+24     	; 0x200 <Lcd_Out+0x40>
 1e8:	21 96       	adiw	r28, 0x01	; 1
		send_data(*text++);
 1ea:	0e 94 54 00 	call	0xa8	; 0xa8 <send_data>
 1ee:	83 ec       	ldi	r24, 0xC3	; 195
 1f0:	99 e0       	ldi	r25, 0x09	; 9
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_Out+0x32>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_Out+0x38>
 1f8:	00 00       	nop
void Lcd_Out(char row, char column, char *text){
	row-- ;
	column--;
	send_command((0x80 + 0x40 * row)+ column );
	_delay_ms(1);
	while(*text){
 1fa:	89 91       	ld	r24, Y+
 1fc:	81 11       	cpse	r24, r1
 1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <Lcd_Out+0x2a>
		send_data(*text++);
		_delay_ms(10);
	}

}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <system_initialize>:
* Description : initialize the system will show "hello rtos" for one second then display the first two 
                items in the menue
* Parameters  : a void pointer
* Return type : void
************************************************************************************************************/
void system_initialize(void *p){
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	DDRA |= (31 << 0); //seting pins as output for leds
 20a:	8a b3       	in	r24, 0x1a	; 26
 20c:	8f 61       	ori	r24, 0x1F	; 31
 20e:	8a bb       	out	0x1a, r24	; 26
	Lcd_Init();
 210:	0e 94 5a 00 	call	0xb4	; 0xb4 <Lcd_Init>
 214:	8f e4       	ldi	r24, 0x4F	; 79
 216:	93 ec       	ldi	r25, 0xC3	; 195
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <system_initialize+0x12>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <system_initialize+0x18>
 21e:	00 00       	nop
	_delay_ms(200);
	Lcd_Out(1 , 1 , "Hello RTOS");
 220:	4c e6       	ldi	r20, 0x6C	; 108
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
 22c:	9f e3       	ldi	r25, 0x3F	; 63
 22e:	2d e0       	ldi	r18, 0x0D	; 13
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	91 50       	subi	r25, 0x01	; 1
 234:	20 40       	sbci	r18, 0x00	; 0
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <system_initialize+0x2c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <system_initialize+0x36>
 23c:	00 00       	nop
	_delay_ms(1000);
	send_command(_LCD_CLEAR);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 4e 00 	call	0x9c	; 0x9c <send_command>
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <system_initialize+0x42>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <system_initialize+0x48>
 24e:	00 00       	nop
	_delay_ms(10);
	Lcd_Chr(1 , 1 , '<');
 250:	4c e3       	ldi	r20, 0x3C	; 60
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 c5 00 	call	0x18a	; 0x18a <Lcd_Chr>
	Lcd_Out(1 , 2 , menue[0]);
 25a:	c0 e6       	ldi	r28, 0x60	; 96
 25c:	d0 e0       	ldi	r29, 0x00	; 0
 25e:	48 81       	ld	r20, Y
 260:	59 81       	ldd	r21, Y+1	; 0x01
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
	Lcd_Chr(1 , 8 , '>');
 26a:	4e e3       	ldi	r20, 0x3E	; 62
 26c:	68 e0       	ldi	r22, 0x08	; 8
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 c5 00 	call	0x18a	; 0x18a <Lcd_Chr>
	Lcd_Out(2 , 1 , menue[1]);
 274:	4a 81       	ldd	r20, Y+2	; 0x02
 276:	5b 81       	ldd	r21, Y+3	; 0x03
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
	
	vTaskDelete(NULL);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 51 05 	call	0xaa2	; 0xaa2 <vTaskDelete>
	
	}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <check_button>:
* Parameters  : void pointer
* Return type : void
************************************************************************************************************/	
void check_button(void *p){
	
	DDRD &= ~ (7 << 0); //seting from d0 to d2 as input
 28e:	81 b3       	in	r24, 0x11	; 17
 290:	88 7f       	andi	r24, 0xF8	; 248
 292:	81 bb       	out	0x11, r24	; 17
	while(1){
		// will stay here until a button is pressed
		while(1){
			if ( !(PIND & (1 << 0)) ) {pressed_button = 'f' ; break ;}
			else if ( !(PIND & (1 << 1)) ) {pressed_button = 'k' ; break ;}
			else if ( !(PIND & (1 << 2)) ) {pressed_button = 'b' ; break ;}
 294:	12 e6       	ldi	r17, 0x62	; 98
	DDRD &= ~ (7 << 0); //seting from d0 to d2 as input
	while(1){
		// will stay here until a button is pressed
		while(1){
			if ( !(PIND & (1 << 0)) ) {pressed_button = 'f' ; break ;}
			else if ( !(PIND & (1 << 1)) ) {pressed_button = 'k' ; break ;}
 296:	db e6       	ldi	r29, 0x6B	; 107
	
	DDRD &= ~ (7 << 0); //seting from d0 to d2 as input
	while(1){
		// will stay here until a button is pressed
		while(1){
			if ( !(PIND & (1 << 0)) ) {pressed_button = 'f' ; break ;}
 298:	c6 e6       	ldi	r28, 0x66	; 102
 29a:	80 99       	sbic	0x10, 0	; 16
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <check_button+0x16>
 29e:	c0 93 a4 00 	sts	0x00A4, r28	; 0x8000a4 <pressed_button>
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <check_button+0x28>
			else if ( !(PIND & (1 << 1)) ) {pressed_button = 'k' ; break ;}
 2a4:	81 99       	sbic	0x10, 1	; 16
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <check_button+0x20>
 2a8:	d0 93 a4 00 	sts	0x00A4, r29	; 0x8000a4 <pressed_button>
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <check_button+0x28>
			else if ( !(PIND & (1 << 2)) ) {pressed_button = 'b' ; break ;}
 2ae:	82 99       	sbic	0x10, 2	; 16
 2b0:	f4 cf       	rjmp	.-24     	; 0x29a <check_button+0xc>
 2b2:	10 93 a4 00 	sts	0x00A4, r17	; 0x8000a4 <pressed_button>
			else {}			
		}
		// giving control to task take action
		vTaskPrioritySet(buttons , 1);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <buttons>
 2bc:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <buttons+0x1>
 2c0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vTaskPrioritySet>
		vTaskPrioritySet(action , 2);
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 2ca:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 2ce:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vTaskPrioritySet>
	}
 2d2:	e3 cf       	rjmp	.-58     	; 0x29a <check_button+0xc>

000002d4 <take_action>:
					i--;
					Lcd_Out(1 , 2 , menue[i]);
					Lcd_Out(2 , 1 , menue[i+1]);
				}
				else if(pressed_button == 'k'){
					PORTA |= (1 << i);
 2d4:	c1 e0       	ldi	r28, 0x01	; 1
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
			if( (i < 5 ) && (i >= 0) ){
				if(pressed_button == 'f'){
					i++;
					Lcd_Out(1 , 2 , menue[i]);
					Lcd_Out(2 , 1 , menue[i+1]);
					if(i == 5 ){i--;}
 2d8:	14 e0       	ldi	r17, 0x04	; 4
 2da:	2f e5       	ldi	r18, 0x5F	; 95
 2dc:	8a ee       	ldi	r24, 0xEA	; 234
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <take_action+0xc>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <take_action+0x16>
 2ea:	00 00       	nop
************************************************************************************************************/
void take_action(void *p){
	
		while(1){
			_delay_ms(300);
			if( (i < 5 ) && (i >= 0) ){
 2ec:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <i>
 2f0:	e5 30       	cpi	r30, 0x05	; 5
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <take_action+0x22>
 2f4:	4f c0       	rjmp	.+158    	; 0x394 <take_action+0xc0>
				if(pressed_button == 'f'){
 2f6:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pressed_button>
 2fa:	86 36       	cpi	r24, 0x66	; 102
 2fc:	11 f5       	brne	.+68     	; 0x342 <take_action+0x6e>
					i++;
 2fe:	ef 5f       	subi	r30, 0xFF	; 255
 300:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <i>
					Lcd_Out(1 , 2 , menue[i]);
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	e0 5a       	subi	r30, 0xA0	; 160
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	40 81       	ld	r20, Z
 310:	51 81       	ldd	r21, Z+1	; 0x01
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
					Lcd_Out(2 , 1 , menue[i+1]);
 31a:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <i>
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	ee 59       	subi	r30, 0x9E	; 158
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	40 81       	ld	r20, Z
 32a:	51 81       	ldd	r21, Z+1	; 0x01
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
					if(i == 5 ){i--;}
 334:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <i>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	61 f5       	brne	.+88     	; 0x394 <take_action+0xc0>
 33c:	10 93 a5 00 	sts	0x00A5, r17	; 0x8000a5 <i>
 340:	29 c0       	rjmp	.+82     	; 0x394 <take_action+0xc0>
				}
				else if(pressed_button == 'b'){
 342:	82 36       	cpi	r24, 0x62	; 98
 344:	e1 f4       	brne	.+56     	; 0x37e <take_action+0xaa>
					i--;
 346:	e1 50       	subi	r30, 0x01	; 1
 348:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <i>
					Lcd_Out(1 , 2 , menue[i]);
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	e0 5a       	subi	r30, 0xA0	; 160
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	40 81       	ld	r20, Z
 358:	51 81       	ldd	r21, Z+1	; 0x01
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
					Lcd_Out(2 , 1 , menue[i+1]);
 362:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <i>
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 59       	subi	r30, 0x9E	; 158
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	40 81       	ld	r20, Z
 372:	51 81       	ldd	r21, Z+1	; 0x01
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lcd_Out>
 37c:	0b c0       	rjmp	.+22     	; 0x394 <take_action+0xc0>
				}
				else if(pressed_button == 'k'){
 37e:	8b 36       	cpi	r24, 0x6B	; 107
 380:	49 f4       	brne	.+18     	; 0x394 <take_action+0xc0>
					PORTA |= (1 << i);
 382:	2b b3       	in	r18, 0x1b	; 27
 384:	ce 01       	movw	r24, r28
 386:	02 c0       	rjmp	.+4      	; 0x38c <take_action+0xb8>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	ea 95       	dec	r30
 38e:	e2 f7       	brpl	.-8      	; 0x388 <take_action+0xb4>
 390:	82 2b       	or	r24, r18
 392:	8b bb       	out	0x1b, r24	; 27
				}
			}
			// giving control back to task check buttons
			vTaskPrioritySet(buttons , 2);
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <buttons>
 39a:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <buttons+0x1>
 39e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vTaskPrioritySet>
			vTaskPrioritySet(action , 1);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 3a8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 3ac:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vTaskPrioritySet>
		}
 3b0:	94 cf       	rjmp	.-216    	; 0x2da <take_action+0x6>

000003b2 <main>:
TaskHandle_t buttons = NULL ;
TaskHandle_t action = NULL ;

int main(void)
{
    xTaskCreate(system_initialize , NULL , 85 , NULL , 3 , NULL);
 3b2:	e1 2c       	mov	r14, r1
 3b4:	f1 2c       	mov	r15, r1
 3b6:	03 e0       	ldi	r16, 0x03	; 3
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	45 e5       	ldi	r20, 0x55	; 85
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskCreate>
	xTaskCreate(check_button , NULL , 85 , NULL , 2 , &buttons);
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f2 ea       	ldi	r31, 0xA2	; 162
 3d0:	ef 2e       	mov	r14, r31
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	ff 2e       	mov	r15, r31
 3d6:	f0 2d       	mov	r31, r0
 3d8:	02 e0       	ldi	r16, 0x02	; 2
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	45 e5       	ldi	r20, 0x55	; 85
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	87 e4       	ldi	r24, 0x47	; 71
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskCreate>
	xTaskCreate(take_action , NULL , 85 , NULL , 1 , &action);
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f0 ea       	ldi	r31, 0xA0	; 160
 3f2:	ef 2e       	mov	r14, r31
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ff 2e       	mov	r15, r31
 3f8:	f0 2d       	mov	r31, r0
 3fa:	01 e0       	ldi	r16, 0x01	; 1
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	45 e5       	ldi	r20, 0x55	; 85
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8a e6       	ldi	r24, 0x6A	; 106
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskCreate>
	vTaskStartScheduler();
 410:	0e 94 1e 06 	call	0xc3c	; 0xc3c <vTaskStartScheduler>
 414:	ff cf       	rjmp	.-2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

00000416 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
 41c:	0e 94 48 06 	call	0xc90	; 0xc90 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 420:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pucAlignedHeap.2100>
 424:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pucAlignedHeap.2100+0x1>
 428:	89 2b       	or	r24, r25
 42a:	31 f4       	brne	.+12     	; 0x438 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 42c:	8b ea       	ldi	r24, 0xAB	; 171
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <pucAlignedHeap.2100+0x1>
 434:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <pucAlignedHeap.2100>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 438:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <xNextFreeByte>
 43c:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <xNextFreeByte+0x1>
 440:	c9 01       	movw	r24, r18
 442:	8c 0f       	add	r24, r28
 444:	9d 1f       	adc	r25, r29
 446:	87 35       	cpi	r24, 0x57	; 87
 448:	42 e0       	ldi	r20, 0x02	; 2
 44a:	94 07       	cpc	r25, r20
 44c:	70 f4       	brcc	.+28     	; 0x46a <pvPortMalloc+0x54>
 44e:	28 17       	cp	r18, r24
 450:	39 07       	cpc	r19, r25
 452:	70 f4       	brcc	.+28     	; 0x470 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 454:	c0 91 a6 00 	lds	r28, 0x00A6	; 0x8000a6 <pucAlignedHeap.2100>
 458:	d0 91 a7 00 	lds	r29, 0x00A7	; 0x8000a7 <pucAlignedHeap.2100+0x1>
 45c:	c2 0f       	add	r28, r18
 45e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 460:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <xNextFreeByte+0x1>
 464:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <xNextFreeByte>
 468:	05 c0       	rjmp	.+10     	; 0x474 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <pvPortMalloc+0x5e>
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 474:	0e 94 0d 07 	call	0xe1a	; 0xe1a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 478:	ce 01       	movw	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 480:	08 95       	ret

00000482 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
}
 482:	fc 01       	movw	r30, r24
 484:	03 96       	adiw	r24, 0x03	; 3
 486:	92 83       	std	Z+2, r25	; 0x02
 488:	81 83       	std	Z+1, r24	; 0x01
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	3f ef       	ldi	r19, 0xFF	; 255
 48e:	34 83       	std	Z+4, r19	; 0x04
 490:	23 83       	std	Z+3, r18	; 0x03
 492:	96 83       	std	Z+6, r25	; 0x06
 494:	85 83       	std	Z+5, r24	; 0x05
 496:	90 87       	std	Z+8, r25	; 0x08
 498:	87 83       	std	Z+7, r24	; 0x07
 49a:	10 82       	st	Z, r1
 49c:	08 95       	ret

0000049e <vListInitialiseItem>:
 49e:	fc 01       	movw	r30, r24
 4a0:	11 86       	std	Z+9, r1	; 0x09
 4a2:	10 86       	std	Z+8, r1	; 0x08
 4a4:	08 95       	ret

000004a6 <vListInsertEnd>:
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	9c 01       	movw	r18, r24
 4ac:	fb 01       	movw	r30, r22
 4ae:	dc 01       	movw	r26, r24
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	cd 91       	ld	r28, X+
 4b4:	dc 91       	ld	r29, X
 4b6:	12 97       	sbiw	r26, 0x02	; 2
 4b8:	d3 83       	std	Z+3, r29	; 0x03
 4ba:	c2 83       	std	Z+2, r28	; 0x02
 4bc:	8c 81       	ldd	r24, Y+4	; 0x04
 4be:	9d 81       	ldd	r25, Y+5	; 0x05
 4c0:	95 83       	std	Z+5, r25	; 0x05
 4c2:	84 83       	std	Z+4, r24	; 0x04
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	9d 81       	ldd	r25, Y+5	; 0x05
 4c8:	dc 01       	movw	r26, r24
 4ca:	13 96       	adiw	r26, 0x03	; 3
 4cc:	7c 93       	st	X, r23
 4ce:	6e 93       	st	-X, r22
 4d0:	12 97       	sbiw	r26, 0x02	; 2
 4d2:	7d 83       	std	Y+5, r23	; 0x05
 4d4:	6c 83       	std	Y+4, r22	; 0x04
 4d6:	31 87       	std	Z+9, r19	; 0x09
 4d8:	20 87       	std	Z+8, r18	; 0x08
 4da:	f9 01       	movw	r30, r18
 4dc:	80 81       	ld	r24, Z
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 83       	st	Z, r24
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 4ee:	a0 85       	ldd	r26, Z+8	; 0x08
 4f0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 4f2:	c2 81       	ldd	r28, Z+2	; 0x02
 4f4:	d3 81       	ldd	r29, Z+3	; 0x03
 4f6:	84 81       	ldd	r24, Z+4	; 0x04
 4f8:	95 81       	ldd	r25, Z+5	; 0x05
 4fa:	9d 83       	std	Y+5, r25	; 0x05
 4fc:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 4fe:	c4 81       	ldd	r28, Z+4	; 0x04
 500:	d5 81       	ldd	r29, Z+5	; 0x05
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	93 81       	ldd	r25, Z+3	; 0x03
 506:	9b 83       	std	Y+3, r25	; 0x03
 508:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 50a:	11 96       	adiw	r26, 0x01	; 1
 50c:	8d 91       	ld	r24, X+
 50e:	9c 91       	ld	r25, X
 510:	12 97       	sbiw	r26, 0x02	; 2
 512:	e8 17       	cp	r30, r24
 514:	f9 07       	cpc	r31, r25
 516:	31 f4       	brne	.+12     	; 0x524 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 518:	84 81       	ldd	r24, Z+4	; 0x04
 51a:	95 81       	ldd	r25, Z+5	; 0x05
 51c:	12 96       	adiw	r26, 0x02	; 2
 51e:	9c 93       	st	X, r25
 520:	8e 93       	st	-X, r24
 522:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 524:	11 86       	std	Z+9, r1	; 0x09
 526:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 528:	8c 91       	ld	r24, X
 52a:	81 50       	subi	r24, 0x01	; 1
 52c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 52e:	8c 91       	ld	r24, X
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 536:	31 e1       	ldi	r19, 0x11	; 17
 538:	fc 01       	movw	r30, r24
 53a:	30 83       	st	Z, r19
 53c:	31 97       	sbiw	r30, 0x01	; 1
 53e:	22 e2       	ldi	r18, 0x22	; 34
 540:	20 83       	st	Z, r18
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	a3 e3       	ldi	r26, 0x33	; 51
 546:	a0 83       	st	Z, r26
 548:	31 97       	sbiw	r30, 0x01	; 1
 54a:	60 83       	st	Z, r22
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	70 83       	st	Z, r23
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	10 82       	st	Z, r1
 554:	31 97       	sbiw	r30, 0x01	; 1
 556:	60 e8       	ldi	r22, 0x80	; 128
 558:	60 83       	st	Z, r22
 55a:	31 97       	sbiw	r30, 0x01	; 1
 55c:	10 82       	st	Z, r1
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	60 83       	st	Z, r22
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	60 83       	st	Z, r22
 56a:	31 97       	sbiw	r30, 0x01	; 1
 56c:	64 e0       	ldi	r22, 0x04	; 4
 56e:	60 83       	st	Z, r22
 570:	31 97       	sbiw	r30, 0x01	; 1
 572:	65 e0       	ldi	r22, 0x05	; 5
 574:	60 83       	st	Z, r22
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	66 e0       	ldi	r22, 0x06	; 6
 57a:	60 83       	st	Z, r22
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	67 e0       	ldi	r22, 0x07	; 7
 580:	60 83       	st	Z, r22
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	68 e0       	ldi	r22, 0x08	; 8
 586:	60 83       	st	Z, r22
 588:	31 97       	sbiw	r30, 0x01	; 1
 58a:	69 e0       	ldi	r22, 0x09	; 9
 58c:	60 83       	st	Z, r22
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	60 e1       	ldi	r22, 0x10	; 16
 592:	60 83       	st	Z, r22
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	30 83       	st	Z, r19
 598:	31 97       	sbiw	r30, 0x01	; 1
 59a:	32 e1       	ldi	r19, 0x12	; 18
 59c:	30 83       	st	Z, r19
 59e:	31 97       	sbiw	r30, 0x01	; 1
 5a0:	33 e1       	ldi	r19, 0x13	; 19
 5a2:	30 83       	st	Z, r19
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	34 e1       	ldi	r19, 0x14	; 20
 5a8:	30 83       	st	Z, r19
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	35 e1       	ldi	r19, 0x15	; 21
 5ae:	30 83       	st	Z, r19
 5b0:	31 97       	sbiw	r30, 0x01	; 1
 5b2:	36 e1       	ldi	r19, 0x16	; 22
 5b4:	30 83       	st	Z, r19
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	37 e1       	ldi	r19, 0x17	; 23
 5ba:	30 83       	st	Z, r19
 5bc:	31 97       	sbiw	r30, 0x01	; 1
 5be:	38 e1       	ldi	r19, 0x18	; 24
 5c0:	30 83       	st	Z, r19
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	39 e1       	ldi	r19, 0x19	; 25
 5c6:	30 83       	st	Z, r19
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	30 e2       	ldi	r19, 0x20	; 32
 5cc:	30 83       	st	Z, r19
 5ce:	31 97       	sbiw	r30, 0x01	; 1
 5d0:	31 e2       	ldi	r19, 0x21	; 33
 5d2:	30 83       	st	Z, r19
 5d4:	31 97       	sbiw	r30, 0x01	; 1
 5d6:	20 83       	st	Z, r18
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	23 e2       	ldi	r18, 0x23	; 35
 5dc:	20 83       	st	Z, r18
 5de:	31 97       	sbiw	r30, 0x01	; 1
 5e0:	40 83       	st	Z, r20
 5e2:	31 97       	sbiw	r30, 0x01	; 1
 5e4:	50 83       	st	Z, r21
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	26 e2       	ldi	r18, 0x26	; 38
 5ea:	20 83       	st	Z, r18
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	27 e2       	ldi	r18, 0x27	; 39
 5f0:	20 83       	st	Z, r18
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	28 e2       	ldi	r18, 0x28	; 40
 5f6:	20 83       	st	Z, r18
 5f8:	31 97       	sbiw	r30, 0x01	; 1
 5fa:	29 e2       	ldi	r18, 0x29	; 41
 5fc:	20 83       	st	Z, r18
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	20 e3       	ldi	r18, 0x30	; 48
 602:	20 83       	st	Z, r18
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	21 e3       	ldi	r18, 0x31	; 49
 608:	20 83       	st	Z, r18
 60a:	86 97       	sbiw	r24, 0x26	; 38
 60c:	08 95       	ret

0000060e <xPortStartScheduler>:
 60e:	1b bc       	out	0x2b, r1	; 43
 610:	8e e0       	ldi	r24, 0x0E	; 14
 612:	8a bd       	out	0x2a, r24	; 42
 614:	8b e0       	ldi	r24, 0x0B	; 11
 616:	8e bd       	out	0x2e, r24	; 46
 618:	89 b7       	in	r24, 0x39	; 57
 61a:	80 61       	ori	r24, 0x10	; 16
 61c:	89 bf       	out	0x39, r24	; 57
 61e:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <pxCurrentTCB>
 622:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 626:	cd 91       	ld	r28, X+
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	dd 91       	ld	r29, X+
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
 656:	bf 90       	pop	r11
 658:	af 90       	pop	r10
 65a:	9f 90       	pop	r9
 65c:	8f 90       	pop	r8
 65e:	7f 90       	pop	r7
 660:	6f 90       	pop	r6
 662:	5f 90       	pop	r5
 664:	4f 90       	pop	r4
 666:	3f 90       	pop	r3
 668:	2f 90       	pop	r2
 66a:	1f 90       	pop	r1
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	08 95       	ret
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	08 95       	ret

00000678 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	0f 92       	push	r0
 680:	1f 92       	push	r1
 682:	11 24       	eor	r1, r1
 684:	2f 92       	push	r2
 686:	3f 92       	push	r3
 688:	4f 92       	push	r4
 68a:	5f 92       	push	r5
 68c:	6f 92       	push	r6
 68e:	7f 92       	push	r7
 690:	8f 92       	push	r8
 692:	9f 92       	push	r9
 694:	af 92       	push	r10
 696:	bf 92       	push	r11
 698:	cf 92       	push	r12
 69a:	df 92       	push	r13
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
 6c0:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <pxCurrentTCB>
 6c4:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 6c8:	0d b6       	in	r0, 0x3d	; 61
 6ca:	0d 92       	st	X+, r0
 6cc:	0e b6       	in	r0, 0x3e	; 62
 6ce:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 6d0:	0e 94 90 07 	call	0xf20	; 0xf20 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 6d4:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <pxCurrentTCB>
 6d8:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 6dc:	cd 91       	ld	r28, X+
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	dd 91       	ld	r29, X+
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	bf 90       	pop	r11
 70e:	af 90       	pop	r10
 710:	9f 90       	pop	r9
 712:	8f 90       	pop	r8
 714:	7f 90       	pop	r7
 716:	6f 90       	pop	r6
 718:	5f 90       	pop	r5
 71a:	4f 90       	pop	r4
 71c:	3f 90       	pop	r3
 71e:	2f 90       	pop	r2
 720:	1f 90       	pop	r1
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0

	asm volatile ( "ret" );
 728:	08 95       	ret

0000072a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	0f 92       	push	r0
 732:	1f 92       	push	r1
 734:	11 24       	eor	r1, r1
 736:	2f 92       	push	r2
 738:	3f 92       	push	r3
 73a:	4f 92       	push	r4
 73c:	5f 92       	push	r5
 73e:	6f 92       	push	r6
 740:	7f 92       	push	r7
 742:	8f 92       	push	r8
 744:	9f 92       	push	r9
 746:	af 92       	push	r10
 748:	bf 92       	push	r11
 74a:	cf 92       	push	r12
 74c:	df 92       	push	r13
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
 772:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <pxCurrentTCB>
 776:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 77a:	0d b6       	in	r0, 0x3d	; 61
 77c:	0d 92       	st	X+, r0
 77e:	0e b6       	in	r0, 0x3e	; 62
 780:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 782:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xTaskIncrementTick>
 786:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 788:	0e 94 90 07 	call	0xf20	; 0xf20 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 78c:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <pxCurrentTCB>
 790:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 794:	cd 91       	ld	r28, X+
 796:	cd bf       	out	0x3d, r28	; 61
 798:	dd 91       	ld	r29, X+
 79a:	de bf       	out	0x3e, r29	; 62
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	bf 91       	pop	r27
 7a6:	af 91       	pop	r26
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	7f 91       	pop	r23
 7ae:	6f 91       	pop	r22
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	bf 90       	pop	r11
 7c6:	af 90       	pop	r10
 7c8:	9f 90       	pop	r9
 7ca:	8f 90       	pop	r8
 7cc:	7f 90       	pop	r7
 7ce:	6f 90       	pop	r6
 7d0:	5f 90       	pop	r5
 7d2:	4f 90       	pop	r4
 7d4:	3f 90       	pop	r3
 7d6:	2f 90       	pop	r2
 7d8:	1f 90       	pop	r1
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0

	asm volatile ( "ret" );
 7e0:	08 95       	ret

000007e2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 7e2:	0e 94 95 03 	call	0x72a	; 0x72a <vPortYieldFromTick>
		asm volatile ( "reti" );
 7e6:	18 95       	reti

000007e8 <prvResetNextTaskUnblockTime>:
	vTaskSuspendAll();
	xPendedTicks += xTicksToCatchUp;
	xYieldRequired = xTaskResumeAll();

	return xYieldRequired;
}
 7e8:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxDelayedTaskList>
 7ec:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxDelayedTaskList+0x1>
 7f0:	80 81       	ld	r24, Z
 7f2:	81 11       	cpse	r24, r1
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <prvResetNextTaskUnblockTime+0x1c>
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	9f ef       	ldi	r25, 0xFF	; 255
 7fa:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <xNextTaskUnblockTime+0x1>
 7fe:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <xNextTaskUnblockTime>
 802:	08 95       	ret
 804:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxDelayedTaskList>
 808:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxDelayedTaskList+0x1>
 80c:	05 80       	ldd	r0, Z+5	; 0x05
 80e:	f6 81       	ldd	r31, Z+6	; 0x06
 810:	e0 2d       	mov	r30, r0
 812:	06 80       	ldd	r0, Z+6	; 0x06
 814:	f7 81       	ldd	r31, Z+7	; 0x07
 816:	e0 2d       	mov	r30, r0
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	93 81       	ldd	r25, Z+3	; 0x03
 81c:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <xNextTaskUnblockTime+0x1>
 820:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <xNextTaskUnblockTime>
 824:	08 95       	ret

00000826 <prvIdleTask>:
 826:	0b e1       	ldi	r16, 0x1B	; 27
 828:	13 e0       	ldi	r17, 0x03	; 3
 82a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 82e:	88 23       	and	r24, r24
 830:	e1 f3       	breq	.-8      	; 0x82a <prvIdleTask+0x4>
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	0f 92       	push	r0
 838:	d8 01       	movw	r26, r16
 83a:	15 96       	adiw	r26, 0x05	; 5
 83c:	ed 91       	ld	r30, X+
 83e:	fc 91       	ld	r31, X
 840:	16 97       	sbiw	r26, 0x06	; 6
 842:	c6 81       	ldd	r28, Z+6	; 0x06
 844:	d7 81       	ldd	r29, Z+7	; 0x07
 846:	ce 01       	movw	r24, r28
 848:	02 96       	adiw	r24, 0x02	; 2
 84a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 84e:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <uxCurrentNumberOfTasks>
 852:	81 50       	subi	r24, 0x01	; 1
 854:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <uxCurrentNumberOfTasks>
 858:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 85c:	81 50       	subi	r24, 0x01	; 1
 85e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	8f 89       	ldd	r24, Y+23	; 0x17
 868:	98 8d       	ldd	r25, Y+24	; 0x18
 86a:	0e 94 40 02 	call	0x480	; 0x480 <vPortFree>
 86e:	ce 01       	movw	r24, r28
 870:	0e 94 40 02 	call	0x480	; 0x480 <vPortFree>
 874:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 878:	81 11       	cpse	r24, r1
 87a:	db cf       	rjmp	.-74     	; 0x832 <prvIdleTask+0xc>
 87c:	d6 cf       	rjmp	.-84     	; 0x82a <prvIdleTask+0x4>

0000087e <xTaskCreate>:
 87e:	4f 92       	push	r4
 880:	5f 92       	push	r5
 882:	6f 92       	push	r6
 884:	7f 92       	push	r7
 886:	8f 92       	push	r8
 888:	9f 92       	push	r9
 88a:	af 92       	push	r10
 88c:	bf 92       	push	r11
 88e:	cf 92       	push	r12
 890:	df 92       	push	r13
 892:	ef 92       	push	r14
 894:	ff 92       	push	r15
 896:	0f 93       	push	r16
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	4c 01       	movw	r8, r24
 89e:	6b 01       	movw	r12, r22
 8a0:	5a 01       	movw	r10, r20
 8a2:	29 01       	movw	r4, r18
 8a4:	ca 01       	movw	r24, r20
 8a6:	0e 94 0b 02 	call	0x416	; 0x416 <pvPortMalloc>
 8aa:	3c 01       	movw	r6, r24
 8ac:	89 2b       	or	r24, r25
 8ae:	09 f4       	brne	.+2      	; 0x8b2 <xTaskCreate+0x34>
 8b0:	e7 c0       	rjmp	.+462    	; 0xa80 <xTaskCreate+0x202>
 8b2:	86 e2       	ldi	r24, 0x26	; 38
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 0b 02 	call	0x416	; 0x416 <pvPortMalloc>
 8ba:	ec 01       	movw	r28, r24
 8bc:	89 2b       	or	r24, r25
 8be:	59 f0       	breq	.+22     	; 0x8d6 <xTaskCreate+0x58>
 8c0:	78 8e       	std	Y+24, r7	; 0x18
 8c2:	6f 8a       	std	Y+23, r6	; 0x17
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	a8 1a       	sub	r10, r24
 8c8:	b1 08       	sbc	r11, r1
 8ca:	a6 0c       	add	r10, r6
 8cc:	b7 1c       	adc	r11, r7
 8ce:	c1 14       	cp	r12, r1
 8d0:	d1 04       	cpc	r13, r1
 8d2:	29 f4       	brne	.+10     	; 0x8de <xTaskCreate+0x60>
 8d4:	20 c0       	rjmp	.+64     	; 0x916 <xTaskCreate+0x98>
 8d6:	c3 01       	movw	r24, r6
 8d8:	0e 94 40 02 	call	0x480	; 0x480 <vPortFree>
 8dc:	d1 c0       	rjmp	.+418    	; 0xa80 <xTaskCreate+0x202>
 8de:	d6 01       	movw	r26, r12
 8e0:	8c 91       	ld	r24, X
 8e2:	89 8f       	std	Y+25, r24	; 0x19
 8e4:	8c 91       	ld	r24, X
 8e6:	88 23       	and	r24, r24
 8e8:	a1 f0       	breq	.+40     	; 0x912 <xTaskCreate+0x94>
 8ea:	ae 01       	movw	r20, r28
 8ec:	46 5e       	subi	r20, 0xE6	; 230
 8ee:	5f 4f       	sbci	r21, 0xFF	; 255
 8f0:	f6 01       	movw	r30, r12
 8f2:	31 96       	adiw	r30, 0x01	; 1
 8f4:	b8 e0       	ldi	r27, 0x08	; 8
 8f6:	cb 0e       	add	r12, r27
 8f8:	d1 1c       	adc	r13, r1
 8fa:	cf 01       	movw	r24, r30
 8fc:	21 91       	ld	r18, Z+
 8fe:	da 01       	movw	r26, r20
 900:	2d 93       	st	X+, r18
 902:	ad 01       	movw	r20, r26
 904:	dc 01       	movw	r26, r24
 906:	8c 91       	ld	r24, X
 908:	88 23       	and	r24, r24
 90a:	19 f0       	breq	.+6      	; 0x912 <xTaskCreate+0x94>
 90c:	ec 15       	cp	r30, r12
 90e:	fd 05       	cpc	r31, r13
 910:	a1 f7       	brne	.-24     	; 0x8fa <xTaskCreate+0x7c>
 912:	18 a2       	std	Y+32, r1	; 0x20
 914:	01 c0       	rjmp	.+2      	; 0x918 <xTaskCreate+0x9a>
 916:	19 8e       	std	Y+25, r1	; 0x19
 918:	04 30       	cpi	r16, 0x04	; 4
 91a:	08 f0       	brcs	.+2      	; 0x91e <xTaskCreate+0xa0>
 91c:	03 e0       	ldi	r16, 0x03	; 3
 91e:	0e 8b       	std	Y+22, r16	; 0x16
 920:	6e 01       	movw	r12, r28
 922:	b2 e0       	ldi	r27, 0x02	; 2
 924:	cb 0e       	add	r12, r27
 926:	d1 1c       	adc	r13, r1
 928:	c6 01       	movw	r24, r12
 92a:	0e 94 4f 02 	call	0x49e	; 0x49e <vListInitialiseItem>
 92e:	ce 01       	movw	r24, r28
 930:	0c 96       	adiw	r24, 0x0c	; 12
 932:	0e 94 4f 02 	call	0x49e	; 0x49e <vListInitialiseItem>
 936:	d9 87       	std	Y+9, r29	; 0x09
 938:	c8 87       	std	Y+8, r28	; 0x08
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	80 1b       	sub	r24, r16
 940:	91 09       	sbc	r25, r1
 942:	9d 87       	std	Y+13, r25	; 0x0d
 944:	8c 87       	std	Y+12, r24	; 0x0c
 946:	db 8b       	std	Y+19, r29	; 0x13
 948:	ca 8b       	std	Y+18, r28	; 0x12
 94a:	19 a2       	std	Y+33, r1	; 0x21
 94c:	1a a2       	std	Y+34, r1	; 0x22
 94e:	1b a2       	std	Y+35, r1	; 0x23
 950:	1c a2       	std	Y+36, r1	; 0x24
 952:	1d a2       	std	Y+37, r1	; 0x25
 954:	a2 01       	movw	r20, r4
 956:	b4 01       	movw	r22, r8
 958:	c5 01       	movw	r24, r10
 95a:	0e 94 9b 02 	call	0x536	; 0x536 <pxPortInitialiseStack>
 95e:	99 83       	std	Y+1, r25	; 0x01
 960:	88 83       	st	Y, r24
 962:	e1 14       	cp	r14, r1
 964:	f1 04       	cpc	r15, r1
 966:	19 f0       	breq	.+6      	; 0x96e <xTaskCreate+0xf0>
 968:	f7 01       	movw	r30, r14
 96a:	d1 83       	std	Z+1, r29	; 0x01
 96c:	c0 83       	st	Z, r28
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	0f 92       	push	r0
 974:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <uxCurrentNumberOfTasks>
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <uxCurrentNumberOfTasks>
 97e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pxCurrentTCB>
 982:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 986:	89 2b       	or	r24, r25
 988:	d1 f5       	brne	.+116    	; 0x9fe <xTaskCreate+0x180>
 98a:	d0 93 68 03 	sts	0x0368, r29	; 0x800368 <pxCurrentTCB+0x1>
 98e:	c0 93 67 03 	sts	0x0367, r28	; 0x800367 <pxCurrentTCB>
 992:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <uxCurrentNumberOfTasks>
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	09 f0       	breq	.+2      	; 0x99c <xTaskCreate+0x11e>
 99a:	41 c0       	rjmp	.+130    	; 0xa1e <xTaskCreate+0x1a0>
 99c:	83 e4       	ldi	r24, 0x43	; 67
 99e:	93 e0       	ldi	r25, 0x03	; 3
 9a0:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9a4:	8c e4       	ldi	r24, 0x4C	; 76
 9a6:	93 e0       	ldi	r25, 0x03	; 3
 9a8:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9ac:	85 e5       	ldi	r24, 0x55	; 85
 9ae:	93 e0       	ldi	r25, 0x03	; 3
 9b0:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9b4:	8e e5       	ldi	r24, 0x5E	; 94
 9b6:	93 e0       	ldi	r25, 0x03	; 3
 9b8:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9bc:	8a e3       	ldi	r24, 0x3A	; 58
 9be:	93 e0       	ldi	r25, 0x03	; 3
 9c0:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9c4:	81 e3       	ldi	r24, 0x31	; 49
 9c6:	93 e0       	ldi	r25, 0x03	; 3
 9c8:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9cc:	84 e2       	ldi	r24, 0x24	; 36
 9ce:	93 e0       	ldi	r25, 0x03	; 3
 9d0:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9d4:	8b e1       	ldi	r24, 0x1B	; 27
 9d6:	93 e0       	ldi	r25, 0x03	; 3
 9d8:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9dc:	81 e1       	ldi	r24, 0x11	; 17
 9de:	93 e0       	ldi	r25, 0x03	; 3
 9e0:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
 9e4:	8a e3       	ldi	r24, 0x3A	; 58
 9e6:	93 e0       	ldi	r25, 0x03	; 3
 9e8:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <pxDelayedTaskList+0x1>
 9ec:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <pxDelayedTaskList>
 9f0:	81 e3       	ldi	r24, 0x31	; 49
 9f2:	93 e0       	ldi	r25, 0x03	; 3
 9f4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <pxOverflowDelayedTaskList+0x1>
 9f8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <pxOverflowDelayedTaskList>
 9fc:	10 c0       	rjmp	.+32     	; 0xa1e <xTaskCreate+0x1a0>
 9fe:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <xSchedulerRunning>
 a02:	81 11       	cpse	r24, r1
 a04:	0c c0       	rjmp	.+24     	; 0xa1e <xTaskCreate+0x1a0>
 a06:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 a0a:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 a0e:	96 89       	ldd	r25, Z+22	; 0x16
 a10:	8e 89       	ldd	r24, Y+22	; 0x16
 a12:	89 17       	cp	r24, r25
 a14:	20 f0       	brcs	.+8      	; 0xa1e <xTaskCreate+0x1a0>
 a16:	d0 93 68 03 	sts	0x0368, r29	; 0x800368 <pxCurrentTCB+0x1>
 a1a:	c0 93 67 03 	sts	0x0367, r28	; 0x800367 <pxCurrentTCB>
 a1e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uxTaskNumber>
 a22:	8f 5f       	subi	r24, 0xFF	; 255
 a24:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uxTaskNumber>
 a28:	8e 89       	ldd	r24, Y+22	; 0x16
 a2a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <uxTopReadyPriority>
 a2e:	98 17       	cp	r25, r24
 a30:	10 f4       	brcc	.+4      	; 0xa36 <xTaskCreate+0x1b8>
 a32:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uxTopReadyPriority>
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	9c 01       	movw	r18, r24
 a3a:	22 0f       	add	r18, r18
 a3c:	33 1f       	adc	r19, r19
 a3e:	22 0f       	add	r18, r18
 a40:	33 1f       	adc	r19, r19
 a42:	22 0f       	add	r18, r18
 a44:	33 1f       	adc	r19, r19
 a46:	82 0f       	add	r24, r18
 a48:	93 1f       	adc	r25, r19
 a4a:	b6 01       	movw	r22, r12
 a4c:	8d 5b       	subi	r24, 0xBD	; 189
 a4e:	9c 4f       	sbci	r25, 0xFC	; 252
 a50:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <xSchedulerRunning>
 a5c:	88 23       	and	r24, r24
 a5e:	61 f0       	breq	.+24     	; 0xa78 <xTaskCreate+0x1fa>
 a60:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 a64:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 a68:	96 89       	ldd	r25, Z+22	; 0x16
 a6a:	8e 89       	ldd	r24, Y+22	; 0x16
 a6c:	98 17       	cp	r25, r24
 a6e:	30 f4       	brcc	.+12     	; 0xa7c <xTaskCreate+0x1fe>
 a70:	0e 94 3c 03 	call	0x678	; 0x678 <vPortYield>
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <xTaskCreate+0x204>
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <xTaskCreate+0x204>
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <xTaskCreate+0x204>
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	df 91       	pop	r29
 a84:	cf 91       	pop	r28
 a86:	0f 91       	pop	r16
 a88:	ff 90       	pop	r15
 a8a:	ef 90       	pop	r14
 a8c:	df 90       	pop	r13
 a8e:	cf 90       	pop	r12
 a90:	bf 90       	pop	r11
 a92:	af 90       	pop	r10
 a94:	9f 90       	pop	r9
 a96:	8f 90       	pop	r8
 a98:	7f 90       	pop	r7
 a9a:	6f 90       	pop	r6
 a9c:	5f 90       	pop	r5
 a9e:	4f 90       	pop	r4
 aa0:	08 95       	ret

00000aa2 <vTaskDelete>:
 aa2:	0f 93       	push	r16
 aa4:	1f 93       	push	r17
 aa6:	cf 93       	push	r28
 aa8:	df 93       	push	r29
 aaa:	ec 01       	movw	r28, r24
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	f8 94       	cli
 ab0:	0f 92       	push	r0
 ab2:	89 2b       	or	r24, r25
 ab4:	21 f4       	brne	.+8      	; 0xabe <vTaskDelete+0x1c>
 ab6:	c0 91 67 03 	lds	r28, 0x0367	; 0x800367 <pxCurrentTCB>
 aba:	d0 91 68 03 	lds	r29, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 abe:	8e 01       	movw	r16, r28
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	c8 01       	movw	r24, r16
 ac6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 aca:	8c 89       	ldd	r24, Y+20	; 0x14
 acc:	9d 89       	ldd	r25, Y+21	; 0x15
 ace:	89 2b       	or	r24, r25
 ad0:	21 f0       	breq	.+8      	; 0xada <vTaskDelete+0x38>
 ad2:	ce 01       	movw	r24, r28
 ad4:	0c 96       	adiw	r24, 0x0c	; 12
 ad6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 ada:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uxTaskNumber>
 ade:	8f 5f       	subi	r24, 0xFF	; 255
 ae0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uxTaskNumber>
 ae4:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pxCurrentTCB>
 ae8:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 aec:	c8 17       	cp	r28, r24
 aee:	d9 07       	cpc	r29, r25
 af0:	59 f4       	brne	.+22     	; 0xb08 <vTaskDelete+0x66>
 af2:	b8 01       	movw	r22, r16
 af4:	8b e1       	ldi	r24, 0x1B	; 27
 af6:	93 e0       	ldi	r25, 0x03	; 3
 af8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
 afc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 b00:	8f 5f       	subi	r24, 0xFF	; 255
 b02:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <uxDeletedTasksWaitingCleanUp>
 b06:	0e c0       	rjmp	.+28     	; 0xb24 <vTaskDelete+0x82>
 b08:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <uxCurrentNumberOfTasks>
 b0c:	81 50       	subi	r24, 0x01	; 1
 b0e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <uxCurrentNumberOfTasks>
 b12:	8f 89       	ldd	r24, Y+23	; 0x17
 b14:	98 8d       	ldd	r25, Y+24	; 0x18
 b16:	0e 94 40 02 	call	0x480	; 0x480 <vPortFree>
 b1a:	ce 01       	movw	r24, r28
 b1c:	0e 94 40 02 	call	0x480	; 0x480 <vPortFree>
 b20:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvResetNextTaskUnblockTime>
 b24:	0f 90       	pop	r0
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <xSchedulerRunning>
 b2c:	88 23       	and	r24, r24
 b2e:	49 f0       	breq	.+18     	; 0xb42 <vTaskDelete+0xa0>
 b30:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <pxCurrentTCB>
 b34:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 b38:	c8 17       	cp	r28, r24
 b3a:	d9 07       	cpc	r29, r25
 b3c:	11 f4       	brne	.+4      	; 0xb42 <vTaskDelete+0xa0>
 b3e:	0e 94 3c 03 	call	0x678	; 0x678 <vPortYield>
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	0f 91       	pop	r16
 b4a:	08 95       	ret

00000b4c <vTaskPrioritySet>:
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	ec 01       	movw	r28, r24
 b58:	64 30       	cpi	r22, 0x04	; 4
 b5a:	08 f0       	brcs	.+2      	; 0xb5e <vTaskPrioritySet+0x12>
 b5c:	63 e0       	ldi	r22, 0x03	; 3
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	0f 92       	push	r0
 b64:	20 97       	sbiw	r28, 0x00	; 0
 b66:	21 f4       	brne	.+8      	; 0xb70 <vTaskPrioritySet+0x24>
 b68:	c0 91 67 03 	lds	r28, 0x0367	; 0x800367 <pxCurrentTCB>
 b6c:	d0 91 68 03 	lds	r29, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 b70:	8e 89       	ldd	r24, Y+22	; 0x16
 b72:	86 17       	cp	r24, r22
 b74:	09 f4       	brne	.+2      	; 0xb78 <vTaskPrioritySet+0x2c>
 b76:	5a c0       	rjmp	.+180    	; 0xc2c <vTaskPrioritySet+0xe0>
 b78:	86 17       	cp	r24, r22
 b7a:	88 f4       	brcc	.+34     	; 0xb9e <vTaskPrioritySet+0x52>
 b7c:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <pxCurrentTCB>
 b80:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 b84:	c2 17       	cp	r28, r18
 b86:	d3 07       	cpc	r29, r19
 b88:	a1 f0       	breq	.+40     	; 0xbb2 <vTaskPrioritySet+0x66>
 b8a:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 b8e:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 b92:	11 e0       	ldi	r17, 0x01	; 1
 b94:	96 89       	ldd	r25, Z+22	; 0x16
 b96:	69 17       	cp	r22, r25
 b98:	68 f4       	brcc	.+26     	; 0xbb4 <vTaskPrioritySet+0x68>
 b9a:	10 e0       	ldi	r17, 0x00	; 0
 b9c:	0b c0       	rjmp	.+22     	; 0xbb4 <vTaskPrioritySet+0x68>
 b9e:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <pxCurrentTCB>
 ba2:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 ba6:	11 e0       	ldi	r17, 0x01	; 1
 ba8:	c2 17       	cp	r28, r18
 baa:	d3 07       	cpc	r29, r19
 bac:	19 f0       	breq	.+6      	; 0xbb4 <vTaskPrioritySet+0x68>
 bae:	10 e0       	ldi	r17, 0x00	; 0
 bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <vTaskPrioritySet+0x68>
 bb2:	10 e0       	ldi	r17, 0x00	; 0
 bb4:	6e 8b       	std	Y+22, r22	; 0x16
 bb6:	2c 85       	ldd	r18, Y+12	; 0x0c
 bb8:	3d 85       	ldd	r19, Y+13	; 0x0d
 bba:	33 23       	and	r19, r19
 bbc:	34 f0       	brlt	.+12     	; 0xbca <vTaskPrioritySet+0x7e>
 bbe:	24 e0       	ldi	r18, 0x04	; 4
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	26 1b       	sub	r18, r22
 bc4:	31 09       	sbc	r19, r1
 bc6:	3d 87       	std	Y+13, r19	; 0x0d
 bc8:	2c 87       	std	Y+12, r18	; 0x0c
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	9c 01       	movw	r18, r24
 bce:	22 0f       	add	r18, r18
 bd0:	33 1f       	adc	r19, r19
 bd2:	22 0f       	add	r18, r18
 bd4:	33 1f       	adc	r19, r19
 bd6:	22 0f       	add	r18, r18
 bd8:	33 1f       	adc	r19, r19
 bda:	82 0f       	add	r24, r18
 bdc:	93 1f       	adc	r25, r19
 bde:	8d 5b       	subi	r24, 0xBD	; 189
 be0:	9c 4f       	sbci	r25, 0xFC	; 252
 be2:	2a 85       	ldd	r18, Y+10	; 0x0a
 be4:	3b 85       	ldd	r19, Y+11	; 0x0b
 be6:	28 17       	cp	r18, r24
 be8:	39 07       	cpc	r19, r25
 bea:	e9 f4       	brne	.+58     	; 0xc26 <vTaskPrioritySet+0xda>
 bec:	7e 01       	movw	r14, r28
 bee:	82 e0       	ldi	r24, 0x02	; 2
 bf0:	e8 0e       	add	r14, r24
 bf2:	f1 1c       	adc	r15, r1
 bf4:	c7 01       	movw	r24, r14
 bf6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 bfa:	8e 89       	ldd	r24, Y+22	; 0x16
 bfc:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <uxTopReadyPriority>
 c00:	98 17       	cp	r25, r24
 c02:	10 f4       	brcc	.+4      	; 0xc08 <vTaskPrioritySet+0xbc>
 c04:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uxTopReadyPriority>
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	9c 01       	movw	r18, r24
 c0c:	22 0f       	add	r18, r18
 c0e:	33 1f       	adc	r19, r19
 c10:	22 0f       	add	r18, r18
 c12:	33 1f       	adc	r19, r19
 c14:	22 0f       	add	r18, r18
 c16:	33 1f       	adc	r19, r19
 c18:	82 0f       	add	r24, r18
 c1a:	93 1f       	adc	r25, r19
 c1c:	b7 01       	movw	r22, r14
 c1e:	8d 5b       	subi	r24, 0xBD	; 189
 c20:	9c 4f       	sbci	r25, 0xFC	; 252
 c22:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
 c26:	11 11       	cpse	r17, r1
 c28:	0e 94 3c 03 	call	0x678	; 0x678 <vPortYield>
 c2c:	0f 90       	pop	r0
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	1f 91       	pop	r17
 c36:	ff 90       	pop	r15
 c38:	ef 90       	pop	r14
 c3a:	08 95       	ret

00000c3c <vTaskStartScheduler>:
 c3c:	ef 92       	push	r14
 c3e:	ff 92       	push	r15
 c40:	0f 93       	push	r16
 c42:	0f 2e       	mov	r0, r31
 c44:	f3 e0       	ldi	r31, 0x03	; 3
 c46:	ef 2e       	mov	r14, r31
 c48:	f3 e0       	ldi	r31, 0x03	; 3
 c4a:	ff 2e       	mov	r15, r31
 c4c:	f0 2d       	mov	r31, r0
 c4e:	00 e0       	ldi	r16, 0x00	; 0
 c50:	20 e0       	ldi	r18, 0x00	; 0
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	45 e5       	ldi	r20, 0x55	; 85
 c56:	50 e0       	ldi	r21, 0x00	; 0
 c58:	6a e9       	ldi	r22, 0x9A	; 154
 c5a:	70 e0       	ldi	r23, 0x00	; 0
 c5c:	83 e1       	ldi	r24, 0x13	; 19
 c5e:	94 e0       	ldi	r25, 0x04	; 4
 c60:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskCreate>
 c64:	81 30       	cpi	r24, 0x01	; 1
 c66:	81 f4       	brne	.+32     	; 0xc88 <vTaskStartScheduler+0x4c>
 c68:	f8 94       	cli
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <xNextTaskUnblockTime+0x1>
 c72:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <xNextTaskUnblockTime>
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <xSchedulerRunning>
 c7c:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <xTickCount+0x1>
 c80:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <xTickCount>
 c84:	0e 94 07 03 	call	0x60e	; 0x60e <xPortStartScheduler>
 c88:	0f 91       	pop	r16
 c8a:	ff 90       	pop	r15
 c8c:	ef 90       	pop	r14
 c8e:	08 95       	ret

00000c90 <vTaskSuspendAll>:
 c90:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <uxSchedulerSuspended>
 c94:	8f 5f       	subi	r24, 0xFF	; 255
 c96:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <uxSchedulerSuspended>
 c9a:	08 95       	ret

00000c9c <xTaskIncrementTick>:
 c9c:	cf 92       	push	r12
 c9e:	df 92       	push	r13
 ca0:	ef 92       	push	r14
 ca2:	ff 92       	push	r15
 ca4:	0f 93       	push	r16
 ca6:	1f 93       	push	r17
 ca8:	cf 93       	push	r28
 caa:	df 93       	push	r29
 cac:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <uxSchedulerSuspended>
 cb0:	81 11       	cpse	r24, r1
 cb2:	9f c0       	rjmp	.+318    	; 0xdf2 <xTaskIncrementTick+0x156>
 cb4:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <xTickCount>
 cb8:	f0 90 0f 03 	lds	r15, 0x030F	; 0x80030f <xTickCount+0x1>
 cbc:	8f ef       	ldi	r24, 0xFF	; 255
 cbe:	e8 1a       	sub	r14, r24
 cc0:	f8 0a       	sbc	r15, r24
 cc2:	f0 92 0f 03 	sts	0x030F, r15	; 0x80030f <xTickCount+0x1>
 cc6:	e0 92 0e 03 	sts	0x030E, r14	; 0x80030e <xTickCount>
 cca:	e1 14       	cp	r14, r1
 ccc:	f1 04       	cpc	r15, r1
 cce:	b9 f4       	brne	.+46     	; 0xcfe <xTaskIncrementTick+0x62>
 cd0:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <pxDelayedTaskList>
 cd4:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <pxDelayedTaskList+0x1>
 cd8:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <pxOverflowDelayedTaskList>
 cdc:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <pxOverflowDelayedTaskList+0x1>
 ce0:	30 93 30 03 	sts	0x0330, r19	; 0x800330 <pxDelayedTaskList+0x1>
 ce4:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <pxDelayedTaskList>
 ce8:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <pxOverflowDelayedTaskList+0x1>
 cec:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <pxOverflowDelayedTaskList>
 cf0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <xNumOfOverflows>
 cf4:	8f 5f       	subi	r24, 0xFF	; 255
 cf6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <xNumOfOverflows>
 cfa:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvResetNextTaskUnblockTime>
 cfe:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <xNextTaskUnblockTime>
 d02:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <xNextTaskUnblockTime+0x1>
 d06:	e8 16       	cp	r14, r24
 d08:	f9 06       	cpc	r15, r25
 d0a:	10 f4       	brcc	.+4      	; 0xd10 <xTaskIncrementTick+0x74>
 d0c:	d1 2c       	mov	r13, r1
 d0e:	53 c0       	rjmp	.+166    	; 0xdb6 <xTaskIncrementTick+0x11a>
 d10:	d1 2c       	mov	r13, r1
 d12:	cc 24       	eor	r12, r12
 d14:	c3 94       	inc	r12
 d16:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxDelayedTaskList>
 d1a:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxDelayedTaskList+0x1>
 d1e:	80 81       	ld	r24, Z
 d20:	81 11       	cpse	r24, r1
 d22:	07 c0       	rjmp	.+14     	; 0xd32 <xTaskIncrementTick+0x96>
 d24:	8f ef       	ldi	r24, 0xFF	; 255
 d26:	9f ef       	ldi	r25, 0xFF	; 255
 d28:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <xNextTaskUnblockTime+0x1>
 d2c:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <xNextTaskUnblockTime>
 d30:	42 c0       	rjmp	.+132    	; 0xdb6 <xTaskIncrementTick+0x11a>
 d32:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <pxDelayedTaskList>
 d36:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <pxDelayedTaskList+0x1>
 d3a:	05 80       	ldd	r0, Z+5	; 0x05
 d3c:	f6 81       	ldd	r31, Z+6	; 0x06
 d3e:	e0 2d       	mov	r30, r0
 d40:	c6 81       	ldd	r28, Z+6	; 0x06
 d42:	d7 81       	ldd	r29, Z+7	; 0x07
 d44:	8a 81       	ldd	r24, Y+2	; 0x02
 d46:	9b 81       	ldd	r25, Y+3	; 0x03
 d48:	e8 16       	cp	r14, r24
 d4a:	f9 06       	cpc	r15, r25
 d4c:	28 f4       	brcc	.+10     	; 0xd58 <xTaskIncrementTick+0xbc>
 d4e:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <xNextTaskUnblockTime+0x1>
 d52:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <xNextTaskUnblockTime>
 d56:	2f c0       	rjmp	.+94     	; 0xdb6 <xTaskIncrementTick+0x11a>
 d58:	8e 01       	movw	r16, r28
 d5a:	0e 5f       	subi	r16, 0xFE	; 254
 d5c:	1f 4f       	sbci	r17, 0xFF	; 255
 d5e:	c8 01       	movw	r24, r16
 d60:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 d64:	8c 89       	ldd	r24, Y+20	; 0x14
 d66:	9d 89       	ldd	r25, Y+21	; 0x15
 d68:	89 2b       	or	r24, r25
 d6a:	21 f0       	breq	.+8      	; 0xd74 <xTaskIncrementTick+0xd8>
 d6c:	ce 01       	movw	r24, r28
 d6e:	0c 96       	adiw	r24, 0x0c	; 12
 d70:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 d74:	8e 89       	ldd	r24, Y+22	; 0x16
 d76:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <uxTopReadyPriority>
 d7a:	98 17       	cp	r25, r24
 d7c:	10 f4       	brcc	.+4      	; 0xd82 <xTaskIncrementTick+0xe6>
 d7e:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uxTopReadyPriority>
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	9c 01       	movw	r18, r24
 d86:	22 0f       	add	r18, r18
 d88:	33 1f       	adc	r19, r19
 d8a:	22 0f       	add	r18, r18
 d8c:	33 1f       	adc	r19, r19
 d8e:	22 0f       	add	r18, r18
 d90:	33 1f       	adc	r19, r19
 d92:	82 0f       	add	r24, r18
 d94:	93 1f       	adc	r25, r19
 d96:	b8 01       	movw	r22, r16
 d98:	8d 5b       	subi	r24, 0xBD	; 189
 d9a:	9c 4f       	sbci	r25, 0xFC	; 252
 d9c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
 da0:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 da4:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 da8:	9e 89       	ldd	r25, Y+22	; 0x16
 daa:	86 89       	ldd	r24, Z+22	; 0x16
 dac:	98 17       	cp	r25, r24
 dae:	08 f4       	brcc	.+2      	; 0xdb2 <xTaskIncrementTick+0x116>
 db0:	b2 cf       	rjmp	.-156    	; 0xd16 <xTaskIncrementTick+0x7a>
 db2:	dc 2c       	mov	r13, r12
 db4:	b0 cf       	rjmp	.-160    	; 0xd16 <xTaskIncrementTick+0x7a>
 db6:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 dba:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 dbe:	86 89       	ldd	r24, Z+22	; 0x16
 dc0:	90 e0       	ldi	r25, 0x00	; 0
 dc2:	fc 01       	movw	r30, r24
 dc4:	ee 0f       	add	r30, r30
 dc6:	ff 1f       	adc	r31, r31
 dc8:	ee 0f       	add	r30, r30
 dca:	ff 1f       	adc	r31, r31
 dcc:	ee 0f       	add	r30, r30
 dce:	ff 1f       	adc	r31, r31
 dd0:	8e 0f       	add	r24, r30
 dd2:	9f 1f       	adc	r25, r31
 dd4:	fc 01       	movw	r30, r24
 dd6:	ed 5b       	subi	r30, 0xBD	; 189
 dd8:	fc 4f       	sbci	r31, 0xFC	; 252
 dda:	80 81       	ld	r24, Z
 ddc:	82 30       	cpi	r24, 0x02	; 2
 dde:	10 f0       	brcs	.+4      	; 0xde4 <xTaskIncrementTick+0x148>
 de0:	dd 24       	eor	r13, r13
 de2:	d3 94       	inc	r13
 de4:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <xYieldPending>
 de8:	88 23       	and	r24, r24
 dea:	69 f0       	breq	.+26     	; 0xe06 <xTaskIncrementTick+0x16a>
 dec:	dd 24       	eor	r13, r13
 dee:	d3 94       	inc	r13
 df0:	0a c0       	rjmp	.+20     	; 0xe06 <xTaskIncrementTick+0x16a>
 df2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <xPendedTicks>
 df6:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <xPendedTicks+0x1>
 dfa:	01 96       	adiw	r24, 0x01	; 1
 dfc:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <xPendedTicks+0x1>
 e00:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <xPendedTicks>
 e04:	d1 2c       	mov	r13, r1
 e06:	8d 2d       	mov	r24, r13
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	1f 91       	pop	r17
 e0e:	0f 91       	pop	r16
 e10:	ff 90       	pop	r15
 e12:	ef 90       	pop	r14
 e14:	df 90       	pop	r13
 e16:	cf 90       	pop	r12
 e18:	08 95       	ret

00000e1a <xTaskResumeAll>:
 e1a:	df 92       	push	r13
 e1c:	ef 92       	push	r14
 e1e:	ff 92       	push	r15
 e20:	0f 93       	push	r16
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	0f 92       	push	r0
 e2e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <uxSchedulerSuspended>
 e32:	81 50       	subi	r24, 0x01	; 1
 e34:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <uxSchedulerSuspended>
 e38:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <uxSchedulerSuspended>
 e3c:	81 11       	cpse	r24, r1
 e3e:	63 c0       	rjmp	.+198    	; 0xf06 <xTaskResumeAll+0xec>
 e40:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <uxCurrentNumberOfTasks>
 e44:	81 11       	cpse	r24, r1
 e46:	33 c0       	rjmp	.+102    	; 0xeae <xTaskResumeAll+0x94>
 e48:	61 c0       	rjmp	.+194    	; 0xf0c <xTaskResumeAll+0xf2>
 e4a:	d7 01       	movw	r26, r14
 e4c:	15 96       	adiw	r26, 0x05	; 5
 e4e:	ed 91       	ld	r30, X+
 e50:	fc 91       	ld	r31, X
 e52:	16 97       	sbiw	r26, 0x06	; 6
 e54:	c6 81       	ldd	r28, Z+6	; 0x06
 e56:	d7 81       	ldd	r29, Z+7	; 0x07
 e58:	ce 01       	movw	r24, r28
 e5a:	0c 96       	adiw	r24, 0x0c	; 12
 e5c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 e60:	8e 01       	movw	r16, r28
 e62:	0e 5f       	subi	r16, 0xFE	; 254
 e64:	1f 4f       	sbci	r17, 0xFF	; 255
 e66:	c8 01       	movw	r24, r16
 e68:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uxListRemove>
 e6c:	8e 89       	ldd	r24, Y+22	; 0x16
 e6e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <uxTopReadyPriority>
 e72:	98 17       	cp	r25, r24
 e74:	10 f4       	brcc	.+4      	; 0xe7a <xTaskResumeAll+0x60>
 e76:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uxTopReadyPriority>
 e7a:	90 e0       	ldi	r25, 0x00	; 0
 e7c:	9c 01       	movw	r18, r24
 e7e:	22 0f       	add	r18, r18
 e80:	33 1f       	adc	r19, r19
 e82:	22 0f       	add	r18, r18
 e84:	33 1f       	adc	r19, r19
 e86:	22 0f       	add	r18, r18
 e88:	33 1f       	adc	r19, r19
 e8a:	82 0f       	add	r24, r18
 e8c:	93 1f       	adc	r25, r19
 e8e:	b8 01       	movw	r22, r16
 e90:	8d 5b       	subi	r24, 0xBD	; 189
 e92:	9c 4f       	sbci	r25, 0xFC	; 252
 e94:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
 e98:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <pxCurrentTCB>
 e9c:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <pxCurrentTCB+0x1>
 ea0:	9e 89       	ldd	r25, Y+22	; 0x16
 ea2:	86 89       	ldd	r24, Z+22	; 0x16
 ea4:	98 17       	cp	r25, r24
 ea6:	68 f0       	brcs	.+26     	; 0xec2 <xTaskResumeAll+0xa8>
 ea8:	d0 92 09 03 	sts	0x0309, r13	; 0x800309 <xYieldPending>
 eac:	0a c0       	rjmp	.+20     	; 0xec2 <xTaskResumeAll+0xa8>
 eae:	c0 e0       	ldi	r28, 0x00	; 0
 eb0:	d0 e0       	ldi	r29, 0x00	; 0
 eb2:	0f 2e       	mov	r0, r31
 eb4:	f4 e2       	ldi	r31, 0x24	; 36
 eb6:	ef 2e       	mov	r14, r31
 eb8:	f3 e0       	ldi	r31, 0x03	; 3
 eba:	ff 2e       	mov	r15, r31
 ebc:	f0 2d       	mov	r31, r0
 ebe:	dd 24       	eor	r13, r13
 ec0:	d3 94       	inc	r13
 ec2:	f7 01       	movw	r30, r14
 ec4:	80 81       	ld	r24, Z
 ec6:	81 11       	cpse	r24, r1
 ec8:	c0 cf       	rjmp	.-128    	; 0xe4a <xTaskResumeAll+0x30>
 eca:	cd 2b       	or	r28, r29
 ecc:	11 f0       	breq	.+4      	; 0xed2 <xTaskResumeAll+0xb8>
 ece:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvResetNextTaskUnblockTime>
 ed2:	c0 91 0a 03 	lds	r28, 0x030A	; 0x80030a <xPendedTicks>
 ed6:	d0 91 0b 03 	lds	r29, 0x030B	; 0x80030b <xPendedTicks+0x1>
 eda:	20 97       	sbiw	r28, 0x00	; 0
 edc:	61 f0       	breq	.+24     	; 0xef6 <xTaskResumeAll+0xdc>
 ede:	11 e0       	ldi	r17, 0x01	; 1
 ee0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xTaskIncrementTick>
 ee4:	81 11       	cpse	r24, r1
 ee6:	10 93 09 03 	sts	0x0309, r17	; 0x800309 <xYieldPending>
 eea:	21 97       	sbiw	r28, 0x01	; 1
 eec:	c9 f7       	brne	.-14     	; 0xee0 <xTaskResumeAll+0xc6>
 eee:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <xPendedTicks+0x1>
 ef2:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <xPendedTicks>
 ef6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <xYieldPending>
 efa:	88 23       	and	r24, r24
 efc:	31 f0       	breq	.+12     	; 0xf0a <xTaskResumeAll+0xf0>
 efe:	0e 94 3c 03 	call	0x678	; 0x678 <vPortYield>
 f02:	81 e0       	ldi	r24, 0x01	; 1
 f04:	03 c0       	rjmp	.+6      	; 0xf0c <xTaskResumeAll+0xf2>
 f06:	80 e0       	ldi	r24, 0x00	; 0
 f08:	01 c0       	rjmp	.+2      	; 0xf0c <xTaskResumeAll+0xf2>
 f0a:	80 e0       	ldi	r24, 0x00	; 0
 f0c:	0f 90       	pop	r0
 f0e:	0f be       	out	0x3f, r0	; 63
 f10:	df 91       	pop	r29
 f12:	cf 91       	pop	r28
 f14:	1f 91       	pop	r17
 f16:	0f 91       	pop	r16
 f18:	ff 90       	pop	r15
 f1a:	ef 90       	pop	r14
 f1c:	df 90       	pop	r13
 f1e:	08 95       	ret

00000f20 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 f20:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <uxSchedulerSuspended>
 f24:	88 23       	and	r24, r24
 f26:	21 f0       	breq	.+8      	; 0xf30 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 f28:	81 e0       	ldi	r24, 0x01	; 1
 f2a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <xYieldPending>
 f2e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 f30:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 f34:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <uxTopReadyPriority>
 f38:	82 2f       	mov	r24, r18
 f3a:	90 e0       	ldi	r25, 0x00	; 0
 f3c:	fc 01       	movw	r30, r24
 f3e:	ee 0f       	add	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	ee 0f       	add	r30, r30
 f44:	ff 1f       	adc	r31, r31
 f46:	ee 0f       	add	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	e8 0f       	add	r30, r24
 f4c:	f9 1f       	adc	r31, r25
 f4e:	ed 5b       	subi	r30, 0xBD	; 189
 f50:	fc 4f       	sbci	r31, 0xFC	; 252
 f52:	30 81       	ld	r19, Z
 f54:	31 11       	cpse	r19, r1
 f56:	11 c0       	rjmp	.+34     	; 0xf7a <vTaskSwitchContext+0x5a>
 f58:	21 50       	subi	r18, 0x01	; 1
 f5a:	82 2f       	mov	r24, r18
 f5c:	90 e0       	ldi	r25, 0x00	; 0
 f5e:	fc 01       	movw	r30, r24
 f60:	ee 0f       	add	r30, r30
 f62:	ff 1f       	adc	r31, r31
 f64:	ee 0f       	add	r30, r30
 f66:	ff 1f       	adc	r31, r31
 f68:	ee 0f       	add	r30, r30
 f6a:	ff 1f       	adc	r31, r31
 f6c:	e8 0f       	add	r30, r24
 f6e:	f9 1f       	adc	r31, r25
 f70:	ed 5b       	subi	r30, 0xBD	; 189
 f72:	fc 4f       	sbci	r31, 0xFC	; 252
 f74:	30 81       	ld	r19, Z
 f76:	33 23       	and	r19, r19
 f78:	79 f3       	breq	.-34     	; 0xf58 <vTaskSwitchContext+0x38>
 f7a:	ac 01       	movw	r20, r24
 f7c:	44 0f       	add	r20, r20
 f7e:	55 1f       	adc	r21, r21
 f80:	44 0f       	add	r20, r20
 f82:	55 1f       	adc	r21, r21
 f84:	44 0f       	add	r20, r20
 f86:	55 1f       	adc	r21, r21
 f88:	48 0f       	add	r20, r24
 f8a:	59 1f       	adc	r21, r25
 f8c:	da 01       	movw	r26, r20
 f8e:	ad 5b       	subi	r26, 0xBD	; 189
 f90:	bc 4f       	sbci	r27, 0xFC	; 252
 f92:	11 96       	adiw	r26, 0x01	; 1
 f94:	ed 91       	ld	r30, X+
 f96:	fc 91       	ld	r31, X
 f98:	12 97       	sbiw	r26, 0x02	; 2
 f9a:	02 80       	ldd	r0, Z+2	; 0x02
 f9c:	f3 81       	ldd	r31, Z+3	; 0x03
 f9e:	e0 2d       	mov	r30, r0
 fa0:	12 96       	adiw	r26, 0x02	; 2
 fa2:	fc 93       	st	X, r31
 fa4:	ee 93       	st	-X, r30
 fa6:	11 97       	sbiw	r26, 0x01	; 1
 fa8:	4a 5b       	subi	r20, 0xBA	; 186
 faa:	5c 4f       	sbci	r21, 0xFC	; 252
 fac:	e4 17       	cp	r30, r20
 fae:	f5 07       	cpc	r31, r21
 fb0:	29 f4       	brne	.+10     	; 0xfbc <vTaskSwitchContext+0x9c>
 fb2:	42 81       	ldd	r20, Z+2	; 0x02
 fb4:	53 81       	ldd	r21, Z+3	; 0x03
 fb6:	fd 01       	movw	r30, r26
 fb8:	52 83       	std	Z+2, r21	; 0x02
 fba:	41 83       	std	Z+1, r20	; 0x01
 fbc:	fc 01       	movw	r30, r24
 fbe:	ee 0f       	add	r30, r30
 fc0:	ff 1f       	adc	r31, r31
 fc2:	ee 0f       	add	r30, r30
 fc4:	ff 1f       	adc	r31, r31
 fc6:	ee 0f       	add	r30, r30
 fc8:	ff 1f       	adc	r31, r31
 fca:	8e 0f       	add	r24, r30
 fcc:	9f 1f       	adc	r25, r31
 fce:	fc 01       	movw	r30, r24
 fd0:	ed 5b       	subi	r30, 0xBD	; 189
 fd2:	fc 4f       	sbci	r31, 0xFC	; 252
 fd4:	01 80       	ldd	r0, Z+1	; 0x01
 fd6:	f2 81       	ldd	r31, Z+2	; 0x02
 fd8:	e0 2d       	mov	r30, r0
 fda:	86 81       	ldd	r24, Z+6	; 0x06
 fdc:	97 81       	ldd	r25, Z+7	; 0x07
 fde:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <pxCurrentTCB+0x1>
 fe2:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pxCurrentTCB>
 fe6:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <uxTopReadyPriority>
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
